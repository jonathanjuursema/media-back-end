---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bucket and CloudFront for kick-in.media front-end'

Parameters:

  DomainName:
    Type: String
    Default: kick-in.media

  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /route53/kick-in.media

Resources:

  # CloudFront
  CloudFrontWebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: kick-in.media front-end
        Aliases:
          - dev.kick-in.media
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: frontend-site
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:990658861879:certificate/9000e290-e8b6-448c-a1e6-6da09a58ee2b
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: frontend-site
          ViewerProtocolPolicy: redirect-to-https

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Identity for dev.kick-in.media front-end"

  # DNS
  DNSApexRecord4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontWebDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Sub "dev.${DomainName}."
      HostedZoneId: !Ref HostedZoneId
      Type: A

  DNSApexRecord6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontWebDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Sub "dev.${DomainName}."
      HostedZoneId: !Ref HostedZoneId
      Type: AAAA

  # Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kickin-media-frontend-dev
      WebsiteConfiguration:
        IndexDocument: index.html
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub "${S3Bucket.Arn}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !GetAtt S3Bucket.Arn
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId

  # Upload User
  UploadUser:
    Type: AWS::IAM::User
    Properties:
      UserName: frontend-upload-user-dev
      Policies:
        - PolicyName: 'frontend-upload-user-policy-dev'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetObject"
                  - "s3:HeadObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${S3Bucket.Arn}"
