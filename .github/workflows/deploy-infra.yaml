name: Infrastructure and App Deployment

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/deploy-infra.yaml
      - terraform/**
  pull_request:
    paths:
      - .github/workflows/deploy-infra.yaml
      - terraform/**
  workflow_dispatch:

jobs:

  deploy-infrastructure:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    env:
      # These two are different per environment. Credentials for the Terraform CICD AWS user.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CICD_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Lambda Prerequisites
        run: pip install -r requirements.txt -t .
        working-directory: lambdas/photo-processing-lambda

      - name: Terraform Init
        id: init
        run: terraform -chdir="./terraform" init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir="./terraform" validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir="./terraform" plan -no-color -lock=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch
        env:
          PLAN: "${{ steps.plan.outputs.stderr }}\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `- **Terraform formatting and style üñå \`${{ steps.fmt.outcome }}\`**
            - **Terraform initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`**
            - **Terraform plan üìñ \`${{ steps.plan.outcome }}\`**
            - **Terraform validation ü§ñ \`${{ steps.validate.outcome }}\`**
            <details><summary>Show plan output</summary>
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && steps.plan.outcome != 'failure'
        run: terraform -chdir="./terraform" apply -auto-approve